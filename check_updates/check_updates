#!perl

# check_updates is a Nagios plugin to check if RedHat or Fedora system
# is up-to-date
#
# See  the INSTALL file for installation instructions
#
# Copyright (c) 2007, ETH Zurich.
#
# This module is free software; you can redistribute it and/or modify it
# under the terms of GNU general public license (gpl) version 3.
# See the LICENSE file for details.
#
# RCS information
# enable substitution with:
#   $ svn propset svn:keywords "Id Revision HeadURL Source Date"
#
#   $Id$
#   $Revision$
#   $HeadURL$
#   $Date$

use 5.008;
use strict;
use warnings;
use Carp;

use version; our $VERSION = '1.3.1';

use Data::Dumper;
use English qw(-no_match_vars);
use List::MoreUtils qw(any);
use List::Util qw(first);
use Nagios::Plugin::Getopt;
use Nagios::Plugin::Threshold;
use Nagios::Plugin;
use Number::Format qw(format_number);
use POSIX qw(uname);
use Sort::Versions;

use Readonly;

Readonly my $EXIT_UNKNOWN                 => 3;
Readonly my $YUM_RETURN_UPDATES_AVAILABLE => 100;

# IMPORTANT: Nagios plugins could be executed using embedded perl in this case
#            the main routine would be executed as a subroutine and all the
#            declared subroutines would therefore be inner subroutines
#            This will cause all the global lexical variables not to stay shared
#            in the subroutines!
#
# All variables are therefore declared as package variables...
#
use vars qw(
  $bootcheck
  $exit_message
  $help
  $options
  $plugin
  $threshold
  $wrong_kernel
  @outdated
);

##############################################################################
# subroutines

##############################################################################
# Usage     : whoami()
# Purpose   : retrieve the user runnging the process
# Returns   : username
# Arguments : n/a
# Throws    : n/a
# Comments  : n/a
# See also  : n/a
sub whoami {
    my $output;
    my $pid = open $output, q{-|}, 'whoami'
      or
      $plugin->nagios_exit( UNKNOWN, "Cannot determine the user: $OS_ERROR" );
    while (<$output>) {
        chomp;
        return $_;
    }
    close $output;
    
    $plugin->nagios_exit( UNKNOWN, 'Cannot determine the user' );
    return;
}

##############################################################################
# Usage     : verbose("some message string", $optional_verbosity_level);
# Purpose   : write a message if the verbosity level is high enough
# Returns   : n/a
# Arguments : message : message string
#             level   : options verbosity level
# Throws    : n/a
# Comments  : n/a
# See also  : n/a
sub verbose {

    # arguments
    my $message = shift;
    my $level   = shift;

    if ( !defined $message ) {
        $plugin->nagios_exit( UNKNOWN,
            q{Internal error: not enough parameters for 'verbose'} );
    }

    if ( !defined $level ) {
        $level = 0;
    }

    if ( $level < $options->verbose ) {
        print $message;
    }

    return;

}

##############################################################################
# Usage     : check_running_kernel( $package );
# Purpose   : checks if the loaded kernel is the latest available
# Returns   : n/a
# Arguments : $package : the kernel package name (e.g., kernel or kernel-smp)
# Throws    : n/a
# Comments  : n/a
# See also  : n/a
sub check_running_kernel {

    if ( !$bootcheck ) {
        return;
    }

    my $package = shift;

    my ( $sysname, $nodename, $release, $version, $machine ) = POSIX::uname();

    # remove the trailing arch displayed on some systems

    $release =~ s/\.PAE//mxs;
    $release =~ s/\.(i[3-6]86|ppc|x86_64)$//mxs;
    
    # remove smp

    $release =~ s/smp$//mxs;

    # remove RH flavour

    $release =~ s/\.EL5?$//imxs;

    verbose "running a Linux kernel: $release\n";
    
    my @versions;

    my $output;
    my $pid = open $output, q{-|}, "rpm -q $package $package-PAE"
      or $plugin->nagios_exit( UNKNOWN,
        "Cannot list installed kernels: $OS_ERROR" );
    while (<$output>) {

        my $version = $_;
        
        chomp $version;

        if ($version =~ /not\ installed/mxs) {
            next;
        }

        # strip package name
        $version =~ s/^$package-//mxs;

        # strip architecture
        $version =~ s/\.[^\.]*$//mxs;

        # strip PAE
        $version =~ s/PAE-//mxs;
        
        push @versions, $version;
    }

    close $output;
    
    @versions = sort versioncmp @versions;

    my $installed = $versions[-1];

    verbose "kernel: running = $release, installed = $installed\n";
    
    if ( $installed ne $release ) {

        my $error =
"your machine is running kernel $release but a newer version ($installed) is installed: you should reboot";

        if ($exit_message) {
            $exit_message .= $error;
        }
        else {
            $exit_message = $error;
        }

        $wrong_kernel = 1;
        
    }

    return;

}

##############################################################################
# Usage     : check_yum();
# Purpose   : checks a yum based system for updates
# Returns   : n/a
# Arguments : n/a
# Throws    : n/a
# Comments  : n/a
# See also  : n/a
sub check_yum {

    my $redirection = q{};
    if ( $options->verbose < 2 ) {
        $redirection = '> /dev/null 2>&1';
    }

    my $ret = system("yum check-update $redirection") >> 8;

    if ( $ret == $YUM_RETURN_UPDATES_AVAILABLE ) {

        # count the packages

        verbose "yum reports a non-up-to-date system\n";

        my $output;

        # run yum check update and remove everything
        # up to the first empty line, then count
        # the listed updates

        my $pid = open $output, q{-|},
          q{yum check-update | sed -e '0,/^$/ d'}
          or $plugin->nagios_exit( UNKNOWN, "Cannot list updates: $OS_ERROR" );
        while (<$output>) {
            chomp;
            my $line = $_;
            $line =~ s/\ .*//mxs;
            push @outdated, $line;
        }

        close $output;

        my $message = (scalar @outdated) . ' update';
        if ( @outdated > 1 ) {
            $message = $message . q{s};
        }
        $message = $message . ' available';
        $plugin->add_perfdata(
            label     => 'updates',
            value     => scalar @outdated,
            uom       => q{},
            threshold => $threshold,
        );

        if ($exit_message) {
            $exit_message .= q{, } . $message;
        }
        else {
            $exit_message = $message;
        }

    }
    else {

        verbose "yum reports an up-to-date system\n";

        $plugin->add_perfdata(
            label     => 'updates',
            value     => 0,
            uom       => q{},
            threshold => $threshold,
        );

        if ($exit_message) {
            $plugin->nagios_exit( CRITICAL, $exit_message );
        }
        else {
            $plugin->nagios_exit( OK, 'no updates available' );
        }

    }

    return;

}

##############################################################################
# Usage     : check_up2date();
# Purpose   : checks an up2date based system for updates
# Returns   : n/a
# Arguments : n/a
# Throws    : n/a
# Comments  : n/a
# See also  : n/a
sub check_up2date {

    # parsing the output of up2date -l

    if ( whoami() ne 'root' ) {
        $plugin->nagios_exit( CRITICAL,
            q{must be root to execute 'up2date -l': use sudo} );
    }

    my $output;

    my $command =
q{/usr/sbin/up2date -lf | /bin/grep -A 64 -- '----------------------------------------------------------' | /bin/grep '[[:alpha:]]'};

    my $pid = open $output, q{-|}, $command
      or $plugin->nagios_exit( UNKNOWN, "Cannot list updates: $OS_ERROR" );

    while (<$output>) {
        chomp;
        my $line = $_;
        $line =~ s/\ .*//mxs;
        push @outdated, $line;
    }
    
    close $output;

    if ( @outdated > 0 ) {
        my $message = (scalar @outdated) . ' update';
        if ( @outdated > 1 ) {
            $message = $message . q{s};
        }
        $message = $message . ' available';
        $plugin->add_perfdata(
            label     => 'updates',
            value     => scalar @outdated,
            uom       => q{},
            threshold => $threshold,
        );

        if ($exit_message) {
            $exit_message .= " $message";
        }
        else {
            $exit_message = $message;
        }

    }
    else {

        $plugin->add_perfdata(
            label     => 'updates',
            value     => 0,
            uom       => q{},
            threshold => $threshold,
        );

    }

    return;

}

##############################################################################
# main
#

################
# initialization
$help         = q{};
$bootcheck    = 1;
$wrong_kernel = 0;
$plugin       = Nagios::Plugin->new( shortname => 'CHECK_UPDATES' );

########################
# Command line arguments

$options = Nagios::Plugin::Getopt->new(
    usage   => 'Usage: %s [--help] [--verbose] [--version] [--timeout t]',
    version => $VERSION,
    url     => 'https://trac.id.ethz.ch/projects/nagios_plugins',
    blurb   => 'Checks if RedHat or Fedora system is up-to-date', 
);

$options->arg(
    spec => 'boot-check',
    help => 'Check if the machine was booted with the newest kernel (default)',
);

$options->arg(
    spec => 'no-boot-check',
    help => 'do not complain if the machine was booted with an old kernel',
);

$options->arg(
    spec    => 'warning|w=i',
    help    => 'Exit with WARNING status if more than INTEGER updates are available',
    default => 0
);

$options->arg(
    spec    => 'critical|c=i',
    help    => 'Exit with CRITICLA status if more than INTEGER updates are available',
    default => 0
);

$options->getopts();

$threshold = Nagios::Plugin::Threshold->set_thresholds(
    warning  => $options->get('warning'),
    critical => $options->get('critical'),
);


# check bootcheck consistency
if ($options->get('boot-check') && $options->get('no-boot-check')) {
    $plugin->nagios_exit(
        CRITICAL,
        'Error --boot-check and --no-boot-check specified at the same time'
    );
}

if ($options->get('no-boot-check')) {
    $bootcheck = 0;
}

#########
# Timeout

alarm $options->timeout;

verbose "Checking a $^O system\n";

if ( $OSNAME eq 'linux' ) {

    if ( -r '/etc/issue' ) {

        my $header;
        my $TMP;

        open $TMP, q{<}, '/etc/issue'
          or $plugin->nagios_exit( CRITICAL,
            "Error opening /etc/issue: $OS_ERROR" );
        while (<$TMP>) {
            chomp;
            $header = $_;
            last;
        }
        close $TMP
          or $plugin->nagios_exit( CRITICAL,
            "Error closing /etc/issue: $OS_ERROR" );

        if ( $header =~ /Fedora/mxs ) {
            verbose "Fedora detected: using yum\n";
            check_running_kernel('kernel');
            check_yum();
        }
        elsif ( $header =~ /CentOS/mxs ) {
            verbose "CentOS detected: using yum\n";
            check_running_kernel('kernel-smp');
            check_yum();
        }
        elsif ( $header =~ /Red\ Hat.* 4/mxs ) {
            verbose "RedHat 4 detected: using up2date\n";
            check_running_kernel('kernel-smp');
            check_up2date();
        }
        elsif ( $header =~ /Red\ Hat.* 5/mxs ) {
            verbose "RedHat 5 detected: using yum\n";
            check_running_kernel('kernel');
            check_yum();
        }
        else {
            $plugin->nagios_exit( UNKNOWN, 'unknown Linux distribution' );
        }

        if ($bootcheck && $wrong_kernel) {
            # a wrong kernel always generates a critical
            $plugin->nagios_exit( CRITICAL, $exit_message );
        } else {            
            if ($exit_message) {                

                # Nagios::Plugin does not support the addition Nagios 3 status lines
                # -> we do it manually
                #
                # $plugin->nagios_exit(
                #    $threshold->get_status($updates),
                #    $exit_message
                # );

                my $status = $threshold->get_status((scalar @outdated)+1);

                print 'CHECK_UPDATES '
                    . $Nagios::Plugin::STATUS_TEXT{$status}
                    . " - $exit_message | "
                    . ${$plugin->perfdata}[0]->perfoutput
                    . "\n";

                for my $package (@outdated) {
                    print "$package\n"
                }
            
                exit $status;
                
            }
            else {
                $plugin->nagios_exit( OK, 'no updates available' );
            }
        }

    }
    else {
        $plugin->nagios_exit( UNKNOWN,
            'Cannot detect Linux distribution (no /etc/issue file)' );
    }

}

1;

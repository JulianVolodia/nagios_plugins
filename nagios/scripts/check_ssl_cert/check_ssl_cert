#!/bin/bash
#
# (c) Matteo Corti, ETH Zurich, 2007
#
# check_ssl_cert
#
# Checks an X.509 certificate:
# - checks if the server is running and delivers a valid certificate
# - checks if the CA matches a given pattern
# - checks the validity

VERSION=0.9

################################################################################
# Functions

################################################################################
# Prints usage information
# Params
#   $1 error message (optional)
function usage {

    if [ -n "$1" ] ; then
        echo "Error: $1" 1>&2
    fi
    
    echo
    echo "Usage: check_ssl_cert -H server [-hvw?] [-p port]"
    echo
    echo "   -d days    minimum number of days a certificate has to be valid"
    echo "   -h, -?     this help message"
    echo "   -H host    server"
    echo "   -i issuer  pattern to match the issuer of the certificate"
    echo "   -p port    TCP port"
    echo "   -v         verbose output"
    echo "   -V         version"
    echo
    echo "Report bugs to: Matteo Corti <matteo.corti@id.ethz.ch>"
    echo

    exit 3

}

################################################################################
# Exits with a critical message
# Params
#   $1 error message
function critical {
    echo "SSL CERT CRITICAL|$1"
    exit 2
}

################################################################################
# Exits with a warning message
# Param
#   $1 warning message
function warning {
    echo "SSL CERT WARN|$1"
    exit 1
}

################################################################################
# Formats a time in seconds using days minutes and seconds
# Params
#   $1 time in seconds
function format_days {

    SECONDS=$1

    if [ $((SECONDS/86400)) -gt 0 ] ; then
        STR="$((SECONDS/86400))d"
        SECONDS=$((SECONDS-(SECONDS/86400)*86400))
    fi

    if [ $((SECONDS/3600)) -gt 0 ] ; then
        STR="$STR$((SECONDS/3600))h"
        SECONDS=$((SECONDS-(SECONDS/3600)*3600))
    fi

    if [ $((SECONDS/60)) -gt 0 ] ; then
        STR="$STR$((SECONDS/60))m"
        SECONDS=$((SECONDS-(SECONDS/60)*60))
    fi

    STR="$STR${SECONDS}s"

    echo $STR
        
}

################################################################################
# Checks if a given program is available and executable
# Params
#   $1 program name
function check_prog {

    PROG=`which $1`

    if [ -z "$PROG" ] ; then
        critical "cannot find $1"
    fi

    if [ ! -x "$PROG" ] ; then
        critical "$PROG is not executable"
    fi
        
    echo $PROG

}

################################################################################
# Main
################################################################################

# process command line options
PORT=443
while getopts "vh?H:Vp:d:i:" opt; do
    case $opt in
        d )      DAYS=$OPTARG;   ;;
        h | \? ) usage ; exit 3; ;;
        i )      ISSUER=$OPTARG; ;;
        v )      VERBOSE=1;      ;;
        V )      echo "check_ssl_cert version ${VERSION}"; exit 3; ;;
        H )      HOST=$OPTARG; ;;
        p )      PORT=$OPTARG;   ;;
    esac
done
shift $(($OPTIND - 1))

################################################################################
# sanity checks

###############
# Check options
if [ -z "${HOST}" ] ; then
    usage "No host specified"
fi

#######################
# Check needed programs

check_prog nmap
NMAP=$?

check_prog openssl
OPENSSL=$?

################################################################################
# check if the port is open
if nmap $HOST -P0 -sT -p $PORT 2>&1 | grep -q open ; then

    ################################################################################
    # fetch the X.509 certificate

    CERT="/tmp/check_certs-out.$$"
    ERROR="/tmp/check_certs-errors.$$"

    echo | openssl s_client -connect $HOST:$PORT 2> ${ERROR} 1> ${CERT}

    if grep -q "Connection refused" ${ERROR} ; then
        rm -f ${CERT} ${ERROR}
        critical "connection refused"
        return
    fi

    ################################################################################
    # parse the X.509 certificate

    CA=`openssl x509 -in ${CERT} -issuer -noout | sed -e "s/.*\/O=//" | sed -r "s/\/[A-Z]+=.*//"`
    DATE=`openssl x509 -in ${CERT} -enddate -noout | sed "s/notAfter\=//"`

    ################################################################################
    # check the issuer

    if [ -n "$ISSUER" ] ; then
        if ! echo $CA | grep -q "^$ISSUER$" ; then
            critical "invalid CA ($CA)"
        fi
    fi

    ################################################################################
    # check the validity

    if [ -n "$DAYS" ] ; then

        if ! echo $DAYS | grep -q [1-9][0-9]* ; then
            critical "invalid number of days ($DAYS)"
        fi

        DIFF=$((`date -d "$DATE" "+%s"` - `date "+%s"`))
        DAYS=$((DAYS * 86400))

        if [ $DIFF -le 0 ] ; then
            critical "certificate is expired"
        fi

        if [ $DIFF -le $DAYS ] ; then
            MESSAGE=`format_days $DAYS`
            MESSAGE=`echo "certificate is exipring in" $MESSAGE`
            warning "$MESSAGE"
        fi
          
    fi

    ################################################################################
    # clean up
    rm -f ${CERT} ${ERROR}

    echo "SSL CERT OK|$CA valid until $DATE"
    
    exit 0
    
else

    critical "$HOST:$PORT closed"

fi

#!/usr/bin/perl

use strict;
use Getopt::Long;

my $VERSION    = "1.2";

my $prog_name  = "LM_SENSORS";

my $hddtemp_bin;
my $sensors_bin;

my $drives     = 1;
my $help       = '';
my $list;
my $result;
my $sanitize;
my $sensors    = 1;
my $verbose;
my %checks;
my %rename;
my %sensor_values;
my @drives;

##############################################################################
# subroutines

################################
# prints the usage of the plugin
sub usage {
  my $msg = shift;

  if (defined $msg) {
    print "$msg\n";
}

print "usage:

  -h, --help                help

  -c, --check               specifies a sensor along with warn and crit values
                            -c fan1=1000,2000        checks if fan1 is above 1000 or 2000
                            -c vcore=1,2,12          checks if vcore is between 11-13 or 10-14 (12+-value)
                            sensors with a space in the name can be specified
                            - by escaping the space --check sda\ Temp=50,60
                            - by quoting the name --check 'sda Temp'=50,60
                            - by substituting the space by an underscore --check sda_Temp=50,60

  -d, --drive               check drive temperature

  -l, --list                list sensors

  --hddtemp_bin             specifies the location of the hddtemp binary

  --sensors_bin             specified the location of the sensors binary

  --nosensors               do not check lm_sensors

  --nodrives                do not check drive temperature

  --rename                  renames a sensor in the performance output (useful if you want to have common
                            names for similar sensors across machines)
                            example:
                            --rename cputemp=temp1

  --sanitize                sanitize sensor names (e.g., removing spaces)

  -v, --verbose             verbose output

  --version                 prints $prog_name's version and exits\n";

  exit(3);
}

sub get_path {

    my $prog = shift;
    my $command = "which $prog";
    my $output;
    my $path;
    
    my $pid = open($output, "$command 2>&1 |") or
        die("Cannot execute $command");

    while (<$output>) {
        chomp;
        $path = $_;
    }

    close $output;
    return $path;

}    

sub parse_drives {

    if (-x $hddtemp_bin) {

        open(IN, '/proc/partitions') or
            unknown("Cannot open /proc/partitions");

        while(<IN>) {

            chomp;

            my (
                $major,
                $minor,
                $blocs,
                $name
            ) = split;

            if ($major eq 'major' || $major eq '') {
                next;
            }

            if ($name =~ /[0-9]$/) {
                next;
            }

            if ($verbose > 1) {
                print "  checking disk /dev/$name\n";
            }

            my $command = "$hddtemp_bin -n /dev/$name";

            my $output;

            my $pid = open($output, "$command 2>&1 |") or
                die("Cannot execute $command");

            while (<$output>) {
                chomp;

                if ($_ =~ /^[0-9]+$/) {

                    if ($sanitize) {
                        $name = $name.'Temp';
                    } else {
                        $name = "$name Temp";
                    }

                    # check if the sensor has to be renamed
                    if ($rename{$name}) {
                        $name = $rename{$name};
                    }

                    $sensor_values{$name} = $_;

                    if ($verbose || $list) {
                        print "found temperature for drive $name ($name = $_)\n";
                    }

                } else {
                    if ($verbose) {
                        print "warning: temperature for /dev/$name not available\n";
                    }
                }

            }

            close($output);

        }

        close(IN);

    } else {
        if ($verbose) {
            print "warning: $hddtemp_bin not found: HDD temperatures not checked\n";
        }
    }

}

sub parse_sensors {

    if (-x $sensors_bin) {

        # check if there are configured sensors

        my $command = "$sensors_bin";
        my $output;

        my $pid = open($output, "$command 2>&1 |") or
            die("Cannot execute $command");

        while (<$output>) {
            chomp;
            if (/^No\ sensors found/ ||
                /^Can\'t/) {
                if ($verbose) {
                    print "warning: no sensors found\n";
                }
                return;
            }
            last;
        }

        close $output;

        $command = "$sensors_bin -A | grep \:";
        $output;

        my $pid = open($output, "$command 2>&1 |") or
            die("Cannot execute $command");

        while (<$output>) {
            chomp;

            /(.*):\s+\+?([0-9\-\.]*)\ ?([^\ ]*)\ /;

            my $name  = $1;
            my $value = $2;

            if ($sanitize) {
                $name =~ s/\ //g;
            }

            if ($rename{$name}) {
                $name = $rename{$name};
            }
            
            $sensor_values{$name} = $value;

            if ($verbose || $list) {
                print "found sensor $name ($value)\n";
            }

        }

        close $output;

    } else {
        if ($verbose) {
            print "warning: $sensors_bin not found: HDD temperatures not checked\n";
        }
    }

}

##############################################################################
# main
#

########################
# Command line arguments

Getopt::Long::Configure ("bundling");
$result = GetOptions (
    "check|c=s"     => \%checks,
    "drives!"       => \$drives,
    "help|?|h"      => sub { usage() },
    "hddtemp_bin=s" => \$hddtemp_bin,
    "rename|r=s"    => \%rename,
    "sanitize"      => \$sanitize,
    "sensors!"      => \$sensors,
    "sensors_bin=s" => \$sensors_bin,
    "list|l"        => \$list,
    "verbose|v+"    => \$verbose,
    "version"       => sub { print "check_lm_sensors version $VERSION\n"; exit 3;}
);

if (!$result) {
  usage();
}

if (!(defined $list) && !(defined %checks)) {
    die "at least one check has to be specified";
}

if ($drives) {
    if (!$hddtemp_bin) {
        $hddtemp_bin = get_path('hddtemp');
    }
    if (!$hddtemp_bin) {
        if ($verbose) {
            print "warning: hddtemp not found: HDD temperatures not checked\n";
        }
    } else {
        if ($verbose) {
            print "hddtemp found at $hddtemp_bin\n";
        }
        parse_drives();
    }
}


if ($sensors) {
    if (!$sensors_bin) {
        $sensors_bin = get_path('sensors');
    }
    if (!$sensors_bin && $verbose) {
        print "warning: sensors not found: lm_sensors not checked\n";
    } else {
        if ($verbose) {
            print "sensors found at $sensors_bin\n";
        }
        parse_sensors();
    }
}

# perform checks
my $space     = '';
my $status;
my $criticals = '';
my $warnings  = '';
my $unknowns  = '';

while ( my ($name,$limits) = each %checks ) {

    my $converted_name = $name;
    $converted_name =~ s/_/\ /g;

    if (!$sensor_values{$name} && $sensor_values{$converted_name}) {
        $name = $converted_name;
    }
    if (!$sensor_values{$name}) {
        $unknowns = $unknowns . " $name";
        next;
    }

    my ($warn, $crit, $ref) = split /,/,$limits;

    my $value = $sensor_values{$name};
    my $diff  = $value;
    
    if ($ref) {
        $diff = abs($value-$ref);
    }
    
    if ($diff > $crit) {
        $criticals = $criticals . " $name=".$sensor_values{$name};
    } elsif ($diff > $warn) {
        $warnings = $warnings   . " $name=".$sensor_values{$name};
    }

    if ($space) {
        $status = $status . " ";
    }
    $status = $status . "$name=$value;$warn;$crit;;";
    $space = 1;

}

my $problems;
if (defined $criticals) {
    $problems = $criticals;
}
if (defined $warnings) {
    $problems = $problems . $warnings;
}
if (defined $unknowns) {
    $problems = $problems . $unknowns;
}

if ($criticals ne '') {
    print "$prog_name CRITICAL $problems|$status\n";
    exit(2);
}

if ($warnings ne '') {
    print "$prog_name WARNING $problems|$status\n";
    exit(1);
}

if ($unknowns ne '') {
    print "$prog_name UNKNOWN $problems|$status\n";
    exit(1);
}

print "$prog_name OK|$status\n";
exit(0);

1;

__END__

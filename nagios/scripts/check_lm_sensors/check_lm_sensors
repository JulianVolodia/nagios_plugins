#!/usr/bin/perl

use strict;
use Getopt::Long;

my $VERSION    = "1.0";

my $prog_name       = "LM_SENSORS";

my $all;
my %checks;
my @drives;
my $help       = '';
my $verbose;
my $result;

my %sensors;

##############################################################################
# subroutines

################################
# prints the usage of the plugin
sub usage {
  my $msg = shift;

  if (defined $msg) {
    print "$msg\n";
  }

  print << "EOT";
usage:
  -h, --help                help
  -a, --all                 return the result for all the found sensors
  -c, --checks              specifies a sensor along with warn and crit values
                            -c fan1=1000,2000        checks if fan1 is above 1000 or 2000
                            -c vcore=1,2,12          checks if vcore is between 11-13 or 10-14 (12+-value)
  -d, --drive               check drive temperature
  -v, --verbose             verbose output
  --version                 prints $prog_name's version and exits
EOT
  exit(3);
}

sub parse_drives {

    open(IN, '/proc/partitions') or
        unknown("Cannot open /proc/partitions");

    while(<IN>) {
        
        chomp;
        
        my (
            $major,
            $minor,
            $blocs,
            $name
        ) = split;
        
        if ($major eq 'major' || $major eq '') {
            next;
        }

        if ($name =~ /[0-9]$/) {
            next;
        }
    
        my $command = "hddtemp -n /dev/$name";

        my $output;
        
        my $pid = open($output, "$command 2>&1 |") or
            die("Cannot execute $command");

        while (<$output>) {
            chomp;

            if ($_ =~ /^[0-9]+$/) {
               if ($verbose) {
                    print "found temperature for drive $name ($_)\n";
                }            
                $sensors{"$name Temp"} = $_;
            }
            
        }
                
    }
    
    close(IN);
        
}

sub parse_sensors {

    my $command = 'sensors -A | grep \:';
    my $output;
    
    my $pid = open($output, "$command 2>&1 |") or
        die("Cannot execute $command");

    while (<$output>) {
        chomp;

        /(.*):\s+\+?([0-9\-\.]*)\ ?([^\ ]*)\ /;

        $sensors{$1} = $2;

        if ($verbose) {
            print "found sensor $1 ($2)\n";
        }
                    
    }


}

##############################################################################
# main
#

########################
# Command line arguments

$result = GetOptions (
    "all"          => \$all,
    "check=s"      => \%checks, 
    "help"         => sub { usage() },
    "verbose|v+"   => \$verbose,
    "version"      => sub { print "check_diskio version $VERSION\n"; exit 3;}
);

if (!$result) {
  usage();
}

if (!(defined $all) && !(defined %checks)) {
    die "at least one check has to be specified";
}

parse_sensors();
parse_drives();

# build status string

my $space = '';
my $status;
while ( my ($sensor,$value) = each %sensors ) {
    if ($space) {
        $status = $status . " ";
    }
    $status = $status . "'$sensor'=$value;;;;";
    $space = 1;
}

# perform checks
my $criticals = '';
my $warnings  = '';
my $unknowns  = '';
while ( my ($name,$limits) = each %checks ) {

    if (!$sensors{$name}) {
        $unknowns = $unknowns . " $name=".$sensors{$name};
        next;
    }

    my ($warn, $crit, $ref) = split /,/,$limits;

    my $value = $sensors{$name};
    if ($ref) {
        $value = abs($value-$ref);
    }
    
    if ($value > $crit) {
        $criticals = $criticals . " $name=".$sensors{$name};
    } elsif ($value > $warn) {
        $warnings = $warnings   . " $name=".$sensors{$name};
    }        

}

my $problems;
if (defined $criticals) {
    $problems = $criticals;
}
if (defined $warnings) {
    $problems = $problems . $warnings;
}
if (defined $criticals) {
    $problems = $problems . $warnings;
}

if (defined $criticals) {
    print "$prog_name CRITICAL $problems|$status\n";
    exit(2);
}
    
if (defined $warnings) {
    print "$prog_name WARNING $problems|$status\n";
    exit(1);
}

if (defined $unknowns) {
    print "$prog_name UNKNOWN $problems|$status\n";
    exit(1);
}

print "$prog_name OK|$status\n";
exit(0);

1;

__END__

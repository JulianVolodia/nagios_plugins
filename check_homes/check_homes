#!perl

# check_homes is Nagios plugin to check the availability of home directories
#
# See  the INSTALL file for installation instructions
#
# Copyright (c) 2007, ETH Zurich.
#
# This module is free software; you can redistribute it and/or modify it
# under the terms of GNU general public license (gpl) version 3.
# See the LICENSE file for details.
#
# RCS information
# enable substitution with:
#   $ svn propset svn:keywords "Id Revision HeadURL Source Date"
#
#   $Id$
#   $Revision$
#   $HeadURL$
#   $Date$

use 5.008;
use strict;
use warnings;
use Carp;

use version; our $VERSION = '0.2.0';

use English qw(-no_match_vars);
use List::MoreUtils qw(any);
use List::Util qw(first);
use Nagios::Plugin::Getopt;
use Nagios::Plugin::Threshold;
use Nagios::Plugin;
use Readonly;

my @errors;
my $options;
my $plugin;
my $threshold;
my $tmp;

Readonly my $DEFAULT_MAX_ERRORS => 16;
Readonly my $PW_DIR_POS         => 7;    # see getpwnam(3)

##############################################################################
# subroutines

##############################################################################
# Usage     : verbose("some message string", $optional_verbosity_level);
# Purpose   : write a message if the verbosity level is high enough
# Returns   : n/a
# Arguments : message : message string
#             level   : options verbosity level
# Throws    : n/a
# Comments  : n/a
# See also  : n/a
sub verbose {

    # arguments
    my $message = shift;
    my $level   = shift;

    if ( !defined $message ) {
        $plugin->nagios_exit( UNKNOWN,
            q{Internal error: not enough parameters for 'verbose'} );
    }

    if ( !defined $level ) {
        $level = 0;
    }

    if ( $level < $options->verbose ) {
        print $message;
    }

    return;

}

##############################################################################
# Usage     : whoami()
# Purpose   : retrieve the user runnging the process
# Returns   : username
# Arguments : n/a
# Throws    : n/a
# Comments  : n/a
# See also  : n/a
sub whoami {

    my $output;
    my $uname;

    my $pid = open $output, q{-|}, 'whoami'
      or
      $plugin->nagios_exit( UNKNOWN, "Cannot determine the user: $OS_ERROR" );

    while (<$output>) {
        chomp;
        $uname = $_;
    }

    if ( !( close $output ) && ( $OS_ERROR != 0 ) ) {

        # close to a piped open return false if the command with non-zero
        # status. In this case $! is set to 0
        $plugin->nagios_exit( UNKNOWN,
            "Error while closing pipe to whoami: $OS_ERROR\n" );

    }

    if ( !$uname ) {
        $plugin->nagios_exit( UNKNOWN, 'Cannot determine the user' );
    }

    return $uname;

}

##############################################################################
# Usage     : check_user()
# Purpose   : check a users' home
# Returns   : n/a
# Arguments : user : username
# Throws    : n/a
# Comments  : n/a
# See also  : n/a
sub check_user {

    my $user = shift;
    my $home = "/nas/$user";

    verbose 'checking ' . $user . "'s home: $home\n", 1;

    my $ls;
    my $command = "ls -d $home 2>&1 ";
    open $ls, q{-|}, $command
      or
      $plugin->nagios_exit( UNKNOWN, "Cannot execute \"$command\": $OS_ERROR" );
    while (<$ls>) {
        chomp;
        if ( $_ ne $home ) {
            push @errors, $user;
        }
    }
    if ( !( close $ls ) && ( $OS_ERROR != 0 ) ) {

        # close to a piped open return false if the command with non-zero
        # status. In this case $! is set to 0
        $plugin->nagios_exit( UNKNOWN,
            "Error while closing pipe to $command: $OS_ERROR\n" );

    }

    return;

}

##############################################################################
# main
#

################
# initialization
$tmp = '/tmp/check_homes_status-' . whoami();
$plugin = Nagios::Plugin->new( shortname => 'CHECK_HOMES' );

########################
# Command line arguments

$options = Nagios::Plugin::Getopt->new(
    usage =>
'Usage: %s [--help] [--verbose] [--version] [--timeout t] [--checks c] [--max_error m] [--critical c] [--warning w]',
    version => $VERSION,
    url     => 'https://trac.id.ethz.ch/projects/nagios_plugins',
    blurb =>
'check_homes is an ETHZ specific Nagios plugin to test to check home directories of nethz users',
);

$options->arg(
    spec    => 'checks=i',
    help    => 'the number of random home directories to check',
    default => 1,
);

$options->arg(
    spec    => 'max_errors=i',
    help    => 'maximum number of errors shown in the status line',
    default => $DEFAULT_MAX_ERRORS,
);

$options->arg(
    spec    => 'critical|c=i',
    help    => 'connection limit for a critical warning',
    default => 1,
);

$options->arg(
    spec    => 'warning|w=i',
    help    => 'connection limit for a warning',
    default => 1,
);

$options->getopts();

$threshold = Nagios::Plugin::Threshold->set_thresholds(
    warning  => $options->warning,
    critical => $options->critical,
);

#########
# Timeout

alarm $options->timeout;

##############################################################################
# get the user list

my @users;
my $list;
my $filename = '/home/n/conf/studmigr_1.txt';

open $list, q{<}, $filename
  or $plugin->nagios_exit( UNKNOWN, "Cannot open $filename: $OS_ERROR" );

while (<$list>) {
    s/\ .*//mxs;
    chomp;
    push @users, $_;
}

close $list
  or $plugin->nagios_exit( UNKNOWN, "Cannot close $filename: $OS_ERROR" );

my $users_number = @users;

verbose "Retrieved $users_number users\n";

verbose 'Selecting '
  . $options->checks
  . ' random '
  . ( ( $options->checks > 0 ) ? 'users' : 'user' ) . "\n";

srand;

my $i = 0;
my @to_check;

while ( $i < $options->checks ) {

    my $index = int rand $users_number;

    if ( any { /$users[$index]/mxs } @to_check ) {
        redo;
    }

    my $home = ( getpwnam $users[$index]  )[$PW_DIR_POS];
    if ( !( $home && $home =~ m{^/nas/}mxs ) ) {
        redo;
    }

    verbose "  $users[$index]\n", 1;
    push @to_check, $users[$index];

    $i++;

}

my $file;

if ( -f $tmp ) {

    verbose "Adding problematic users from last run\n";

    open $file, q{<}, $tmp
      or $plugin->nagios_exit( UNKNOWN, "Cannot open $tmp: $OS_ERROR" );
    while (<$file>) {
        chomp;
        if ( getpwnam $_ ) {
            verbose "  $_\n", 1;
            push @to_check, $_;
        }
    }
    close $file
      or $plugin->nagios_exit( UNKNOWN, "Cannot close $tmp: $OS_ERROR" );

}

for my $user (@to_check) {
    check_user($user);
}

$plugin->add_perfdata(
    label     => 'errors',
    value     => scalar @errors,
    uom       => q{},
    threshold => $threshold,
);

if (@errors) {
    my $error_string;

    # write the temporary error file
    my $file;
    open $file, q{>}, $tmp
      or $plugin->nagios_exit( WARNING, "Error opening $tmp: $OS_ERROR" );

    for my $user (@errors) {
        print {$file} "$user\n";
    }

    close $file
      or $plugin->nagios_exit( WARNING, "Error closing $tmp: $OS_ERROR" );

    # generate error message
    for my $user (@errors) {
        if ( defined $error_string ) {
            $error_string = "$error_string, /nas/$user";
        }
        else {
            $error_string = "/nas/$user";
        }
    }

    if ( @errors < $options->max_errors ) {
        $error_string = map { "/nas/$_" } join @errors;

    }
    else {
        $error_string = map { "/nas/$_" } join splice @errors, 0,
          $options->max_errors;
        $error_string .= ', ...';
    }

    $plugin->nagios_exit( CRITICAL, "Error accessing $error_string" );
}
else {
    if ( -e $tmp ) {
        unlink $tmp
          or $plugin->nagios_exit( UNKNOWN, "Error deleting $tmp: $OS_ERROR" );
    }

    $plugin->nagios_exit( OK,
            'Checked '
          . $options->checks . q{ }
          . ( ( $options->checks > 1 ) ? 'homes' : 'home' ) );
}

1;

__END__

=pod

=head1 NAME

C<check_homes> - An ETHZ specific test to check home directories of nethz users

=head1 DESCRIPTION

check_homes is an ETHZ specific Nagios plugin to test to check home
directories of nethz users

=head1 VERSION

Version 0.2.0

=head1 USAGE

Usage: check_homes [--help] [--verbose] [--version] [--timeout t]
                   [--critical c] [--warning w]
                   [--checks c] [--max_error m]

=head1 SYNOPSIS

Usage: check_homes [--help] [--verbose] [--version] [--timeout t]
                   [--critical c] [--warning w]
                   [--checks c] [--max_error m]

 -?, --usage
   Print usage information
 -h, --help
   Print detailed help screen
 -V, --version
   Print version information
 --extra-opts=[<section>[@<config_file>]]
   Section and/or config_file from which to load extra options (may repeat)
 -c, --checks=INTEGER
   the number of random home directories to check
 --max_errors=INTEGER
   maximum number of errors shown in the status line
 -c, --critical=INTEGER
   connection limit for a critical warning
 -w, --warning=INTEGER
   connection limit for a warning
 -t, --timeout=INTEGER
   Seconds before plugin times out (default: 15)
 -v, --verbose
   Show details for command-line debugging (can repeat up to 3 times)

=head1 REQUIRED ARGUMENTS

None

=head1 OPTIONS

 -?, --usage
   Print usage information
    
 -h, --help
   Print detailed help screen
    
 -V, --version
   Print version information
    
 --extra-opts=[<section>[@<config_file>]]
   Section and/or config_file from which to load extra options (may repeat)
    
 -c, --checks=INTEGER
   the number of random home directories to check
    
 --max_errors=INTEGER
   maximum number of errors shown in the status line
    
 -c, --critical=INTEGER
   connection limit for a critical warning
    
 -w, --warning=INTEGER
   connection limit for a warning
    
 -t, --timeout=INTEGER
   Seconds before plugin times out (default: 15)
    
 -v, --verbose
   Show details for command-line debugging (can repeat up to 3 times)

=head1 EXAMPLE

 check_homes --check 20

Checks 20 randomly selected home directories

=head1 DIAGNOSTICS

You can specify multiple --verbose options to increase the program
verbosity.

=head1 EXIT STATUS

0 if OK, 1 in case of a warning, 2 in case of a critical status and 3
in case of an unkown problem

=head1 DEPENDENCIES

check_updates depends on

=over 4

=item * Carp

=item * English

=item * List::MoreUtils

=item * List::Util

=item * Nagios::Plugin

=item * Nagios::Plugin::Getopt

=item * Nagios::Plugin::Threshold

=item * version

=back

=head1 CONFIGURATION

=head1 INCOMPATIBILITIES

None reported.

=head1 SEE ALSO

Nagios documentation

=head1 BUGS AND LIMITATIONS

No bugs have been reported.

Please report any bugs or feature requests to matteo.corti@id.ethz.ch,
or through the web interface at
https://svn.id.ethz.ch/trac/bd_webhosting/newticket

=head1 AUTHOR

Matteo Corti <matteo.corti@id.ethz.ch>

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2007, ETH Zurich.

This module is free software; you can redistribute it and/or modify it
under the terms of GNU general public license (gpl) version 3.
See the LICENSE file for details.

=head1 DISCLAIMER OF WARRANTY

BECAUSE THIS SOFTWARE IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
FOR THE SOFTWARE, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT
WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER
PARTIES PROVIDE THE SOFTWARE "AS IS" WITHOUT WARRANTY OF ANY KIND,
EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE
SOFTWARE IS WITH YOU. SHOULD THE SOFTWARE PROVE DEFECTIVE, YOU ASSUME
THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION.

IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
REDISTRIBUTE THE SOFTWARE AS PERMITTED BY THE ABOVE LICENCE, BE LIABLE
TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL, OR
CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE
SOFTWARE (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING
RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A
FAILURE OF THE SOFTWARE TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF
SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH
DAMAGES.

=head1 ACKNOWLEDGMENTS


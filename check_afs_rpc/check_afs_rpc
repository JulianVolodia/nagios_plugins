#!perl

# check_afs_rpc is a Nagios plugin to check for the RPC status of an AFS
# server by using rxdebug
#
# See  the INSTALL file for installation instructions
#
# Copyright (c) 2007, ETH Zurich.
#
# based on check_rxdebug by Quanah Gibson-Mount, Neil Crellin, and Russ Allbery
#
# This module is free software; you can redistribute it and/or modify it
# under the terms of GNU general public license (gpl) version 3.
# See the LICENSE file for details.
#
# RCS information
# enable substitution with:
#   $ svn propset svn:keywords "Id Revision HeadURL Source Date"
#
#   $Id$
#   $Revision$
#   $HeadURL$
#   $Date$

use 5.008;
use strict;
use warnings;
use Carp;

use version; our $VERSION = '1.0.0';

use English qw(-no_match_vars);
use Getopt::Long;
use Nagios::Plugin::Threshold;
use Nagios::Plugin;
use POSIX qw(uname);
use Pod::Usage qw(pod2usage);

# IMPORTANT: Nagios plugins could be executed using embedded perl in this case
#            the main routine would be executed as a subroutine and all the
#            declared subroutines would therefore be inner subroutines
#            This will cause all the global lexical variables not to stay shared
#            in the subroutines!
#
# All variables are therefore declared as package variables...
#
use vars qw(
  $blocked
  $command
  $critical
  $hostname
  $output
  $plugin
  $port
  $verbosity
  $result
  $rxdebug_bin
  $threshold
  $timeout
  $warning
);

##############################################################################
# Usage     : verbose("some message string", $optional_verbosity_level);
# Purpose   : write a message if the verbosity level is high enough
# Returns   : n/a
# Arguments : message : message string
#             level   : options verbosity level
# Throws    : n/a
# Comments  : n/a
# See also  : n/a
sub verbose {

    # arguments
    my $message   = shift;
    my $level     = shift;

    if ( !defined $message) {
        $plugin->nagios_exit(UNKNOWN, q{Internal error: not enough parameters for 'verbose'});
    }
    
    if ( !defined $level ) {
        $level = 0;
    }

    if ( $level < $verbosity ) {
        print $message;
    }

    return;

}

##############################################################################
# Usage     : get_path('program_name');
# Purpose   : retrieves the path of an executable file using the
#             'which' utility
# Returns   : the path of the program (if found)
# Arguments : the program name
# Throws    : n/a
# Comments  : n/a
# See also  : n/a
sub get_path {

    my $prog = shift;
    my $path;

    $command = "which $prog";

    open $output, q{-|}, "$command 2>&1"
      or $plugin->nagios_exit( UNKNOWN, "Cannot execute $command: $OS_ERROR" );

    while (<$output>) {
        chomp;
        if ( !/^which:/mx ) {
            $path = $_;
        }
    }

    if ( !( close $output )
        && ( $OS_ERROR != 0 ) )
    {

        # close to a piped open return false if the command with non-zero
        # status. In this case $! is set to 0
        $plugin->nagios_exit( UNKNOWN,
            "Error while closing pipe to $command: $OS_ERROR\n" );
    }

    return $path;

}

################################################################################
# Main

################
# Initialization

# The default count of blocked connections at which to warn or send a
# critical alert.  These can be overridden with the -w and -c
# command-line options.
$critical = 8;
$warning  = 2;

$verbosity = 0;

# The default timeout in seconds (implemented by alarm) for rxdebug.
$timeout = 60;

$rxdebug_bin = get_path('rxdebug');
$port        = 7_000;

$plugin = Nagios::Plugin->new( shortname => 'CHECK_AFS_RPC' );

##############################
# Process command line options

Getopt::Long::config( 'bundling', 'no_ignore_case' );
$result = GetOptions(
    'critical|c=i' => \$critical,
    'hostname|H=s' => \$hostname,
    'help|h|?'     => sub { pod2usage(); },
    'port|p=i',    => \$port,
    'timeout|t=i'  => \$timeout,
    'verbose|v+'   => \$verbosity,
    'version|V'    => sub { print "check_afs_rpc version $VERSION\n"; exit 3; },
    'warning|w=i'  => \$warning
);

###############
# sanity checks

if ( !defined $hostname ) {
    pod2usage( -message =>
          'Error: please specify an AFS server with the --hostname option' );
}
if ( !defined $rxdebug_bin ) {
    pod2usage( -message =>
'Cannot find the rxdebug binary: please specify it with the --rxdebug option'
    );
}
if ( !-x $rxdebug_bin ) {
    pod2usage( -message => "$rxdebug_bin is not executable" );
}

$threshold = Nagios::Plugin::Threshold->set_thresholds(
    warning  => $warning,
    critical => $critical,
);

####################
# Set up the timeout
$SIG{ALRM} = sub {
    $plugin->nagios_exit( UNKNOWN,
        "AFS_RPC CRITICAL: network timeout after $timeout seconds\n",
    );
};
alarm $timeout;

##################################
# Run rxdebug and parse the output

$command = "$rxdebug_bin -noconn $hostname -port $port";

verbose "Executing $command\n";

open $output, q{-|}, "$command 2>&1"
  or $plugin->nagios_exit( UNKNOWN, "Cannot execute $command: $OS_ERROR", );

undef $blocked;
while (<$output>) {
    if (/^(\d+)\ calls\ waiting\ for\ a\ thread/mx) {
        $blocked = $1;
        last;
    }
}

if ( !( close $output )
    && ( $OS_ERROR != 0 ) )
{

    # close to a piped open return false if the command with non-zero
    # status. In this case $! is set to 0
    $plugin->nagios_exit( UNKNOWN,
        "Error while closing pipe to $command: $OS_ERROR\n" );
}

if ( !defined $blocked ) {
    $plugin->nagios_exit( UNKNOWN, 'Cannot parse rxdebug output', );
}

$plugin->add_perfdata(
    label     => 'blocked',
    value     => $blocked,
    uom       => q{},
    threshold => $threshold,
);

$plugin->nagios_exit( $threshold->get_status($blocked), "blocked = $blocked", );

1;

__END__

=head1 NAME

check_afs_rpc - Check AFS servers for blocked connections in Nagios

=head1 DESCRIPTION

check_afs_rpc is a Nagios plugin to check AFS servers for blocked
connections in Nagios

=head1 VERSION

Version 1.0.0

=head1 SYNOPSIS

 check_rxdebug [OPTIONS] --hostname hostname

 Mandatory arguments:
  --hostname,-H   hostname   name of the AFS server

 Options:
  --critical,-c   critical   specify the critical number of blocked
                             connections (default 8)
  --help,-h,-?               usage info
  --port,p        port       connection port (default 7000)
  --version,V                print version number
  --warning,-w    warning    specify warning threshold for the number
                             blocked connections (default 2)

=head1 REQUIRED ARGUMENTS

--hostname,-H   hostname   name of the AFS server

=head1 OPTIONS

--critical,-c   critical   specify the critical number of blocked
                           connections (default 8)

--help,-h,-?               usage info

--port,p        port       connection port (default 7000)

--version,V                print version number

--warning,-w    warning    specify warning threshold for the number
                           blocked connections (default 2)

=head1 EXAMPLE

check_afs_rpc \
  --hostname my_afs_server.example.com \
  --port 7004 \
  --warning 10 \
  --critical 20

=head1 DESCRIPTION

B<check_afs_rpc> is a Nagios plugin for checking AFS file servers to see if
there are client connections waiting for a free thread.  If there are more
than a few of these, AFS performance tends to be very slow; this is a fairly
reliable way to catch overloaded file servers.  By default, B<check_rxdebug>
returns a critical error if there are more than eight connections waiting
for a free thread and a warning if there are more than two.  These
thresholds can be changed with the B<--critical> and B<--warning> options.

B<check_afs_rpc> will always print out a single line of output including the
number of blocked connections, displaying whether this is critical, a
warning, or okay.

=head1 EXIT STATUS

B<check_afs_rpc> follows the standard Nagios exit status requirements.
This means that it will exit with status 0 if there are no problems,
with status 1 if there is a warning, and with status 2 if there is a
critical problem.  For other errors, such as invalid syntax,
B<check_afs_rpc> will exit with status 3.

=head1 BUGS AND LIMITATIONS

The standard B<-v> verbose Nagios plugin option is not supported, although
it's not entirely clear what it would add.

The usage message for invalid options and for the B<-h> option doesn't
conform to Nagios standards.

=head1 SEE ALSO

Nagios documentation

=head1 AUTHOR

Matteo Corti <matteo.corti@id.ethz.ch>

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2007, ETH Zurich.

This module is free software; you can redistribute it and/or modify it
under the terms of GNU general public license (gpl) version 3.
See the LICENSE file for details.

=head1 DISCLAIMER OF WARRANTY

BECAUSE THIS SOFTWARE IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
FOR THE SOFTWARE, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT
WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER
PARTIES PROVIDE THE SOFTWARE "AS IS" WITHOUT WARRANTY OF ANY KIND,
EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE
SOFTWARE IS WITH YOU. SHOULD THE SOFTWARE PROVE DEFECTIVE, YOU ASSUME
THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION.

IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
REDISTRIBUTE THE SOFTWARE AS PERMITTED BY THE ABOVE LICENCE, BE LIABLE
TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL, OR
CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE
SOFTWARE (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING
RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A
FAILURE OF THE SOFTWARE TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF
SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH
DAMAGES.

=head1 ACKNOWLEDGMENTS

The original idea behind this script was from Neil Crellin.  It was updated
by Quanah Gibson-Mount to work with Nagios, and then further updated by Russ
Allbery <rra@stanford.edu> to support more standard options and to use a
more uniform coding style.

The script was then rewritten by Matteo Corti to be compatible with
embedded Perl, to allow the specification of a different port and to
integrate it with the Nagios::Plugin modules.
